
import os
import streamlit as st
import pdfplumber
import docx
import requests

import json
from google.oauth2 import service_account
from googleapiclient.discovery import build

SCOPES = ['https://www.googleapis.com/auth/drive.file']

# ƒê·ªçc JSON t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
service_json = os.environ.get("GDRIVE_SERVICE_ACCOUNT_JSON")
creds_dict = json.loads(service_json)
creds = service_account.Credentials.from_service_account_info(creds_dict, scopes=SCOPES)
drive_service = build("drive", "v3", credentials=creds)


DATA_DIR = "data"
os.makedirs(DATA_DIR, exist_ok=True)

API_KEY = os.environ.get("OPENROUTER_API_KEY", "")
MODEL = "mistralai/mistral-7b-instruct"
API_URL = "https://openrouter.ai/api/v1/chat/completions"
HEADERS = {
    "Authorization": f"Bearer {API_KEY}",
    "Content-Type": "application/json"
}

st.set_page_config(page_title="Chatbot PCCC", layout="wide")

def extract_text(file_path):
    text = ""
    if file_path.endswith(".txt"):
        with open(file_path, "r", encoding="utf-8") as f:
            text = f.read()
    elif file_path.endswith(".docx"):
        doc = docx.Document(file_path)
        text = "\n".join([para.text for para in doc.paragraphs])
    elif file_path.endswith(".pdf"):
        with pdfplumber.open(file_path) as pdf:
            for page in pdf.pages:
                text += page.extract_text() + "\n"
    return text

def ask_openrouter(context, question):
    prompt = f"{context}\n\nC√¢u h·ªèi: {question}\nTr·∫£ l·ªùi:"
    payload = {
        "model": MODEL,
        "messages": [
            {"role": "system", "content": "B·∫°n l√† tr·ª£ l√Ω AI tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, ch√≠nh x√°c, r√µ r√†ng."},
            {"role": "user", "content": prompt}
        ]
    }
    response = requests.post(API_URL, headers=HEADERS, json=payload)
    if response.status_code == 200:
        return response.json()["choices"][0]["message"]["content"].strip()
    else:
        return f"L·ªói {response.status_code}: {response.text}"

st.title("üí¨ Chatbot PCCC (ghi nh·ªõ t√†i li·ªáu)")
st.markdown("T·∫£i t√†i li·ªáu üìÑ (.txt, .docx, .pdf) ho·∫∑c ƒë·∫∑t c√¢u h·ªèi tr·ª±c ti·∫øp")

# Giao di·ªán upload
uploaded_file = st.file_uploader("T·∫£i t√†i li·ªáu (t√πy ch·ªçn)", type=["txt", "docx", "pdf"])
if uploaded_file:
    saved_path = os.path.join(DATA_DIR, uploaded_file.name)
    with open(saved_path, "wb") as f:
        f.write(uploaded_file.getbuffer())
    st.success(f"‚úÖ ƒê√£ l∆∞u t√†i li·ªáu: {uploaded_file.name}")

# T·ªïng h·ª£p n·ªôi dung t·ª´ t·∫•t c·∫£ c√°c file ƒë√£ l∆∞u
context = ""
for filename in os.listdir(DATA_DIR):
    file_path = os.path.join(DATA_DIR, filename)
    context += extract_text(file_path) + "\n"

# Giao di·ªán c√¢u h·ªèi
question = st.text_input("Nh·∫≠p c√¢u h·ªèi:")
if question:
    with st.spinner("üîé ƒêang tr·∫£ l·ªùi..."):
        answer = ask_openrouter(context, question)
    st.success("üü¢ Tr·∫£ l·ªùi:")
    st.write(answer)
